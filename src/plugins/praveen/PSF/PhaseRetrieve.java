package plugins.praveen.PSF;

import icy.sequence.Sequence;

import com.sun.xml.internal.bind.v2.runtime.unmarshaller.XsiNilLoader.Single;

import edu.emory.mathcs.jtransforms.fft.DoubleFFT_2D;

import plugins.adufour.ezplug.EzPlug;
import plugins.adufour.ezplug.EzGroup;
import plugins.adufour.ezplug.EzVarDouble;
import plugins.adufour.ezplug.EzVarInteger;


public class PhaseRetrieve extends EzPlug {
	private static final Double DEFAULT_INDEXIMMERSION = 1.518;
	private static final Double DEFAULT_NA = 1.4;
	private static final Integer DEFAULT_LEM = 520;
	private static final Double DEFAULT_XYSAMPLING = null;
	private static final Double DEFAULT_ZSAMPLING = null;
	private static final Double DEFAULT_ALPHA = 0.6;
	private static final Integer DEFAULT_NITER = 30;
	private static final Double DEFAULT_SIGMA = 0.5;
	private EzVarDouble _xySampling;
	private EzVarDouble _zSampling;
	private EzVarDouble _indexImmersion;
	private EzVarDouble _na;
	private EzVarInteger _lem;
	private EzVarInteger _nIter;
	private EzVarDouble _sigma;
	private EzVarDouble _alpha;

	@Override
	protected void initialize() {
		/*_w = new EzVarInteger("Image width in pixels");				
		_h = new EzVarInteger("Image height in pixels");
		_z = new EzVarInteger("Number of slices in volume");*/
		_xySampling = new EzVarDouble("Image pixel spacing, in nm");
		_zSampling = new EzVarDouble("Slice spacing (z), in nm");
		_indexImmersion = new EzVarDouble("Refractive index of the lens immersion medium (default oil)");
		_na = new EzVarDouble("Effective numerical aperture");
		_lem = new EzVarInteger("Emission peak wavelength, in nm");
		_nIter = new EzVarInteger("Number of iterations");
		_sigma = new EzVarDouble("Gaussian filter parameter");
		_alpha = new EzVarDouble("Step size");
		
		// Set the default values
        /*_w.setValue(PSFCalculator.DEFAULT_W);
        _h.setValue(PSFCalculator.DEFAULT_H);
        _z.setValue(PSFCalculator.DEFAULT_Z);*/
		_xySampling.setValue(DEFAULT_XYSAMPLING);
        _zSampling.setValue(DEFAULT_ZSAMPLING);
        _indexImmersion.setValue(DEFAULT_INDEXIMMERSION);
        _na.setValue(DEFAULT_NA);
        _lem.setValue(DEFAULT_LEM);
		_nIter.setValue(DEFAULT_NITER);
		_sigma.setValue(DEFAULT_SIGMA);
        _alpha.setValue(DEFAULT_ALPHA);
        
        EzGroup parameterGroup = new EzGroup("Enter microscope settings", _xySampling, _zSampling, _indexImmersion, _na, _lem, _nIter, _sigma, _alpha);
		addEzComponent(parameterGroup);        
	}

	@Override
	protected void execute() {
		PhaseRetrieve parameters = new PhaseRetrieve();
		parameters.setIndexImmersion(_indexImmersion.getValue());
		parameters.setNA(_na.getValue());
		parameters.setLEM(_lem.getValue());
		parameters.setIndexSp(_indexSpecimen.getValue());
		parameters.setXYSAMPLING(_xySampling.getValue());
		parameters.setZSAMPLING(_zSampling.getValue());
		parameters.setDEPTH(_depth.getValue());
		
		addSequence(parameters.compute());		// TODO Auto-generated by Icy4Eclipse
		//MessageDialog.showDialog("test is working fine !");
	}
public Sequence compute(){
		
		final DoubleFFT_2D fft = new DoubleFFT_2D(_w, _h);
		//IcyBufferedImage psf3d = new IcyBufferedImage(_w, _h, 1, DataType.DOUBLE);
		
		int hc = _h/2;
		int wc = _w/2;
		int zc = _z/2;
		double kSampling = (2*Math.PI)/(_h*_xySampling); //Fourier space sampling
}

	public void setIndexImmersion(double src) {
		_indexImmersion = src;
		// TODO Auto-generated method stub
		
	}

	@Override
	public void clean() {
		// TODO Auto-generated by Icy4Eclipse
	}
}
