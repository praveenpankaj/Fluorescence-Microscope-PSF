package plugins.praveen.PSF;

import icy.gui.dialog.MessageDialog;
import icy.sequence.Sequence;
import plugins.adufour.ezplug.EzPlug;
import plugins.adufour.ezplug.EzVarDouble;
import plugins.adufour.ezplug.EzVarFloat;
import plugins.adufour.ezplug.EzVarInteger;
import plugins.adufour.ezplug.EzVarSequence;


public class PhaseRetrieve extends EzPlug {
	EzVarSequence _input = new EzVarSequence("Choose the 3D fluorescence bead image");
	EzVarFloat _xySampling = new EzVarFloat("Image pixel spacing, in nm", (float)92.00, (float)10.00, (float)50000.00, (float)0.1);
	EzVarFloat _zSampling = new EzVarFloat("Slice spacing (z), in nm", (float)277.00, (float)10.00, (float)50000.00, (float)0.1);
	EzVarFloat _objNA = new EzVarFloat("Effective numerical aperture of the objective lens", (float)1.4, (float)0.1, (float)4.00, (float)0.01);
	EzVarFloat _indexImmersion = new EzVarFloat("Refractive index of the lens immersion medium", (float)1.518, (float)1.00, (float)4.00, (float)0.01);
	EzVarInteger _lem = new EzVarInteger("Emission peak wavelength, in nm", 520, 405, 750, 1);
	EzVarFloat _sigma = new EzVarFloat("Gaussian filter parameter", (float)0.5, (float)0.1, (float)1.00, (float)0.01);
	EzVarFloat _alpha = new EzVarFloat("Step size for the iterative algorithm", (float)0.6, (float)0.5, (float)1.00, (float)0.01); 
	EzVarInteger _nIter = new EzVarInteger("Number of iterations", 30, 3, 10000, 1);
	
	
	@Override
	protected void initialize() {		
		
		super.addEzComponent(_input);
		super.addEzComponent(_xySampling);
		super.addEzComponent(_zSampling);
		super.addEzComponent(_objNA);
		super.addEzComponent(_indexImmersion);
		super.addEzComponent(_lem);
		super.addEzComponent(_sigma);
		super.addEzComponent(_alpha);
		super.addEzComponent(_nIter);		         
	}

	@Override
	protected void execute() {
		Sequence pupil = null;
		pupil = estimatepupil(_input.getValue(), _xySampling.getValue(), _zSampling.getValue(), _objNA.getValue(), _indexImmersion.getValue(), _lem.getValue(), _sigma.getValue(), _alpha.getValue(), _nIter.getValue());
	    addSequence(pupil);		
		pupil.setName("Estimated Back Aperture Pupil");
	    pupil.setChannelName(0, "Magnitude");
	    pupil.setChannelName(1, "Phase");
		MessageDialog.showDialog("Test is working fine!");
	}

	public Sequence estimatepupil(Sequence sequence, float _xySampling, float _zSampling, float _objNA, float _indexImmersion, int _lem, float _sigma, float _alpha, int _nIter) {
		// TODO Auto-generated method stub
		int nz = 0;
		
		Sequence pupil = new Sequence();
		
		int _w = sequence.getSizeX();
		int _h = sequence.getSizeY();
		int _z = sequence.getSizeZ();
		return null;
	}

	@Override
	public void clean() {
		// TODO Auto-generated by Icy4Eclipse
	}
}
